# ü¶Ä Estudos em Rust ‚Äî Seguran√ßa, Performance e Concorr√™ncia

> Este documento acompanha meus estudos em **Rust**, uma linguagem focada em performance, seguran√ßa e concorr√™ncia sem garbage collector. O objetivo √© dominar os princ√≠pios de sistemas seguros e eficientes, aplic√°veis a desenvolvimento WebAssembly, CLI tools e contratos inteligentes.

---

## ‚úÖ Conte√∫do Estudado
- [x] Instala√ß√£o via `rustup` e uso do `cargo`
- [x] Hello World e estrutura b√°sica de projeto Rust
- [x] Tipos primitivos e vari√°veis imut√°veis/mut√°veis
- [x] Controle de fluxo: `if`, `match`, `loop`, `for`, `while`
- [x] Fun√ß√µes e declara√ß√£o de m√≥dulos
- [x] Structs, enums e pattern matching
- [x] Ownership, borrowing e lifetimes
- [x] Collections: vectors, strings, hashmaps

---

## üìò Roadmap Futuro
### Manipula√ß√£o Avan√ßada
- [ ] Traits, generics e impl blocks
- [ ] Error handling com `Result` e `Option`
- [ ] Macros (`println!`, `derive`, `custom macros`)

### Concorr√™ncia e Performance
- [ ] Threads e canal de comunica√ß√£o (`std::sync`)
- [ ] Async/Await com `tokio` e `async-std`

### Desenvolvimento Web
- [ ] API REST com `actix-web` ou `axum`
- [ ] Serializa√ß√£o JSON com `serde`
- [ ] Projeto CRUD com banco de dados (`diesel` ou `sqlx`)

### Projetos Pr√°ticos
- [ ] CLI de gerenciamento de tarefas com `clap`
- [ ] Web scraper com `reqwest` e `select`
- [ ] Contrato inteligente com `ink!` ou `Soroban` (Stellar)

---

### ‚ú® Autor
**Uederson Ferreira**  
[LinkedIn](https://www.linkedin.com/in/uederson-ferreira) | [GitHub](https://github.com/uederson-ferreira)
